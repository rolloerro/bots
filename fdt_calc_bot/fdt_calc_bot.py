# fdt_calc_bot.py
import telebot
from telebot import types
import math

# –¢–æ–∫–µ–Ω (–∑–∞—à–∏—Ç –ø—Ä—è–º–æ –≤ –∫–æ–¥)
TOKEN = "8215850630:AAETWXW8P0_8McnXklulm6jtmKzTglJXwVg"
bot = telebot.TeleBot(TOKEN)

# --- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã ---

def calc_skin(diameter, power_density=0.4, dose=300):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ–∂–∏, —à–µ–π–∫–∏, –≤–ª–∞–≥–∞–ª–∏—â–∞, –≤—É–ª—å–≤—ã"""
    radius = diameter / 2
    area = math.pi * (radius ** 2)
    power_mw = power_density * area * 1000  # –º–í—Ç
    total_dose = dose * area
    exposure = total_dose / (power_density * area * 1000) / 60  # –º–∏–Ω
    return f"""üìä –†–∞—Å—á—ë—Ç –§–î–¢ (–ö–æ–∂–∞/–®–µ–π–∫–∞/–í–ª–∞–≥–∞–ª–∏—â–µ/–í—É–ª—å–≤–∞)

–î–∏–∞–º–µ—Ç—Ä –∏–∑–ª—É—á–µ–Ω–∏—è: {diameter} —Å–º
–†–∞–¥–∏—É—Å: {radius:.2f} —Å–º
–ü–ª–æ—â–∞–¥—å: {area:.2f} —Å–º¬≤

–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –º–æ—â–Ω–æ—Å—Ç–∏: {power_density} –í—Ç/—Å–º¬≤
–ú–æ—â–Ω–æ—Å—Ç—å –∏–∑–ª—É—á–∞—Ç–µ–ª—è: {power_mw:.0f} –º–í—Ç

–î–æ–∑–∞ –æ–±–ª—É—á–µ–Ω–∏—è: {dose} –î–∂/—Å–º¬≤
–û–±—â–∞—è –¥–æ–∑–∞: {total_dose:.0f} –î–∂

‚è± –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è: {exposure:.2f} –º–∏–Ω
"""

def calc_cervix(diffuser_length, power_mw, distance, dose=300):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ü–µ—Ä–≤–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: –≤—Ä–µ–º—è —Ä–∞—Å—Ç—ë—Ç –ª–∏–Ω–µ–π–Ω–æ —Å –¥–ª–∏–Ω–æ–π –¥–∏—Ñ—Ñ—É–∑–æ—Ä–∞
    base_time = 15.6 * diffuser_length / 4  # –ø—Ä–∏ 4 —Å–º = 15.6 –º–∏–Ω
    return f"""üë©‚Äç‚öïÔ∏è –†–∞—Å—á—ë—Ç –§–î–¢ (–¶–µ—Ä–≤–∏–∫–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª)

–î–ª–∏–Ω–∞ –¥–∏—Ñ—Ñ—É–∑–æ—Ä–∞: {diffuser_length} —Å–º
–ú–æ—â–Ω–æ—Å—Ç—å –∏–∑–ª—É—á–∞—Ç–µ–ª—è: {power_mw} –º–í—Ç
–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–ø—É—Ö–æ–ª–∏: {distance} —Å–º
–î–æ–∑–∞ –æ–±–ª—É—á–µ–Ω–∏—è: {dose} –î–∂/—Å–º¬≤

‚è± –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è: {base_time:.2f} –º–∏–Ω
"""

def calc_urology(diffuser_length, power_mw, distance, dose=300):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —É—Ä–æ–ª–æ–≥–∏–∏ –∏ —ç–Ω–¥–æ—Å–∫–æ–ø–∏–∏"""
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –≤ –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∏–∏
    base_time = 15.6 * diffuser_length / 4
    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    factor = 1 + (distance / 0.1) * 0.05
    exposure = base_time * factor
    return f"""üßë‚Äç‚öïÔ∏è –†–∞—Å—á—ë—Ç –§–î–¢ (–£—Ä–æ–ª–æ–≥–∏—è –∏ —ç–Ω–¥–æ—Å–∫–æ–ø–∏—è)

–î–ª–∏–Ω–∞ –¥–∏—Ñ—Ñ—É–∑–æ—Ä–∞: {diffuser_length} —Å–º
–ú–æ—â–Ω–æ—Å—Ç—å –∏–∑–ª—É—á–∞—Ç–µ–ª—è: {power_mw} –º–í—Ç
–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–ø—É—Ö–æ–ª–∏: {distance} —Å–º
–î–æ–∑–∞ –æ–±–ª—É—á–µ–Ω–∏—è: {dose} –î–∂/—Å–º¬≤

‚è± –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è: {exposure:.2f} –º–∏–Ω
"""

# --- –ú–µ–Ω—é ---

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üß¥ –ö–æ–∂–∞/–®–µ–π–∫–∞/–í–ª–∞–≥–∞–ª–∏—â–µ/–í—É–ª—å–≤–∞")
    markup.row("üë©‚Äç‚öïÔ∏è –¶–µ—Ä–≤–∏–∫–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª")
    markup.row("üßë‚Äç‚öïÔ∏è –£—Ä–æ–ª–æ–≥–∏—è –∏ —ç–Ω–¥–æ—Å–∫–æ–ø–∏—è")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! üëã –Ø FDT_CalcBot. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:",
                     reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üß¥ –ö–æ–∂–∞/–®–µ–π–∫–∞/–í–ª–∞–≥–∞–ª–∏—â–µ/–í—É–ª—å–≤–∞")
def skin_calc(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –∏–∑–ª—É—á–µ–Ω–∏—è –≤ —Å–º (–æ—Ç 1 –¥–æ 7):")
    bot.register_next_step_handler(message, process_skin)

def process_skin(message):
    try:
        diameter = float(message.text)
        result = calc_skin(diameter)
        bot.send_message(message.chat.id, result, reply_markup=main_menu())
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "üë©‚Äç‚öïÔ∏è –¶–µ—Ä–≤–∏–∫–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª")
def cervix_calc(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –¥–∏—Ñ—Ñ—É–∑–æ—Ä–∞ (2-6 —Å–º):")
    bot.register_next_step_handler(message, process_cervix_length)

def process_cervix_length(message):
    try:
        length = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –∏–∑–ª—É—á–∞—Ç–µ–ª—è (–º–í—Ç, ‚â§1000):")
        bot.register_next_step_handler(message, process_cervix_power, length)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def process_cervix_power(message, length):
    try:
        power = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–ø—É—Ö–æ–ª–∏ (—Å–º):")
        bot.register_next_step_handler(message, process_cervix_distance, length, power)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def process_cervix_distance(message, length, power):
    try:
        distance = float(message.text)
        result = calc_cervix(length, power, distance)
        bot.send_message(message.chat.id, result, reply_markup=main_menu())
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "üßë‚Äç‚öïÔ∏è –£—Ä–æ–ª–æ–≥–∏—è –∏ —ç–Ω–¥–æ—Å–∫–æ–ø–∏—è")
def uro_calc(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –¥–∏—Ñ—Ñ—É–∑–æ—Ä–∞ (2-7 —Å–º):")
    bot.register_next_step_handler(message, process_uro_length)

def process_uro_length(message):
    try:
        length = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –∏–∑–ª—É—á–∞—Ç–µ–ª—è (–º–í—Ç, ‚â§1000):")
        bot.register_next_step_handler(message, process_uro_power, length)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def process_uro_power(message, length):
    try:
        power = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–ø—É—Ö–æ–ª–∏ (—Å–º):")
        bot.register_next_step_handler(message, process_uro_distance, length, power)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def process_uro_distance(message, length, power):
    try:
        distance = float(message.text)
        result = calc_urology(length, power, distance)
        bot.send_message(message.chat.id, result, reply_markup=main_menu())
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("üöÄ FDT_CalcBot –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
